far correggere

/* Dato un servizio di message passing asincrono e senza fare uso di processi server:
a) implementare un servizio di message passing sincrono a ricezione multipla. Questo servizio prevede due funzioni
con la seguente interfaccia:
 ms_send(pid dest, msg_t msg)
 ms_recv(int n, pid *senders, msg_t *msgs)
L'operazione di ricezione deve attendere n messaggi, provenienti dai mittenti indicati nel vettore senders (ogni
elemento può essere ANY/*) e metterli ordinatamente nel vettore msgs (entrambi i vettori saranno stati
opportunamente allocati e dimensionati dal chiamante). I processi mittenti degli n messaggi devono rimanere in
attesa fino a che la ms_recv non può essere completata.
b) analizzare i casi di deadlock che possono accadere in base alla definizione del servizio di message passing sincrono
a ricezione multipla.*/

//MPA -> MPS a ricezione multipla

//deve rimanere in attesa finché la ms_recv non è completata
ms_send (pid dest, msg_t msg){
	asend(<getpid(), msg>, dest);
	ACK = arecv(dest);
}

//attende n msg provenienti dai mittenti in senders (anche ANY)
//e li mette in ordine in msgs

ms_recv(int n, pid * senders, msg_t *msgs){
	msg_t *p1 = msgs;
	pid * p2 = senders;
	//quando p2 ha finito di scorrere la lista dei senders
	while(p2!=NULL){
		s, m = arecv(p2.val);
		p1.val = m;
		p2.val = s;
		p1 = p1.next;
		p2 = p2.next;
	}
	while(senders!=NULL){
		asend(ACK, senders.val);
		senders=senders.next;
	}
	return msgs;
}
