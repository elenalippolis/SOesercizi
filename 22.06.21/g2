a) Come si calcola la lunghezza massima di un file in un FIle System tipo UNIX (bffs, ext2, minix ecc)?
La lunghezza massima di un file system dipende in generale da:
1- dimensione del campo di indicizzazione: un file system utilizza una struttura dati per tenere traccia delle informazioni
  sulle posizioni dei blocchi di dati di un file. La dimensione del campo di indicizzazione può limitare la lunghezza massima di un file:
  ad esempio se il campo di indicizzazione è di 32 bit, il numero massimo di blocchi che possono essere indicizzati è 2^32
2- dimensione dei blocchi di dati: un file system organizza i dati in blocchi di dimensioni fisse. La dimensione dei blocchi di dati può 
  influenzare la lunghezza massima di un file dal momento che il file può essere composto da un numero massimo di blocchi
3- dimensione dell'indirizzo di blocco: è l'unità di indirizzamento utilizzata per accedere ai blocchi di dati di un file. Come 1.
4- parametri di configurazione del file system

b) Come si fa a risolvere una situazione di deadlock?
1. detection: algoritmo che rileva la presenza di un deadlock del sistema

Condizioni in cui avviene un deadlock (che devono esserci contemporaneamente):
- mutua esclusione
- hold and wait
- attesa circolare
- no preemption

2. recupero dal deadlock: terminazione di due o più processi o rollback dello stato del sistema a uno precedente
3. prevention: algoritmo del banchiere, approccio di prevenzione dei deadlock che si basa sull'assegnazione responsabile delle risorse
  ai processi. Evita di assegnare risorse che potrebbero portare a situazioni di deadlocl
 

c) Perché è meglio la paginazione della compattazione di memoria?
La paginazione è un metodo di gestione della memoria virtuale in cui la memoria fisica e virtuale sono divise in pagine di dimensioni
fisse. 
La compattazione della memoria è una tecnica utilizzata per ridurre la frammentazione della memoria mediante la riorganizzazione dei blocchi 
di memoria per creare spazi liberi contigui.
La paginazione è generalmente preferita per diversi motivi:
1- è più efficiente in termini di tempo e risorse: i frame di memoria vengono utilizzati in modo flessibile e le pagine possono essere facilmente 
  allocate e deallocate senza richiedere operazioni di movimento dati come la compattazione, che può richiedere molto tempo e risorse.
2- offre migliori prestazioni, in quanto le pagine possono essere allocate e deallocate rapidamente senza richiedere la riorganizzazione della memoria,
  l'accesso alla memoria risulta più veloce; la compattazione richiedere un'operazione di spostamento dei dati che può ridurre le prestazioni
3- flessibilità: le pagine possono essere deallocate e allocate in modo indipendente, consentendo una gestione efficiente delle risorse. 
4- gestione della frammentazione più efficiente: la frammentazione esterna che si può verificare nella compattazione, viene evitata dalla paginazione
  poiché le pagine sono di dimensione fissa e non c'è bisogno di creare spazi liberi contigui

d) Per implementare un servizio di autorizzazione di tipo capability è meglio usare crittografia simmetrica o crittografia
a chiave pubblica? perché? E' necessario usare un metodo specifico (crittografia simmetrica o crittografia a chiave
pubblica) o il servizio di autorizzazione potrebbe essere implementato con entrambi?
Per implementare un servizio di autorizzazione di tipo capability, è generalmente preferibile usare la crittografia a chiave pubblica, per motivi di:
1- sicurezza: la crittografia a chiave pubblica offre maggiore sicurezza. 
2- distribuzione chiavi: la chiave pubblica può essere distribuita senza compromettere la sicurezza del sistema, quindi consente un'implementazione più semplice
  del servizio di autorizzazione
3- scalabilità: è possibile gestire in modo più efficiente un grande numero di utenti autorizzati.



