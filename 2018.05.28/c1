//fai controllare

/* La struttura di sincronizzazione riempisvuota ha le seguenti caratteristiche:
-) entrano MAX processi, e fino a che non è piena nessun processo può uscire
-) i processi devono uscire in ordine inverso rispetto all'ordine di arrivo.
Quando un processo vuole usare la struttura riempisvuota chiama la seguente funzione:
 def riempisvuotasynch():
 riempisvuota.entra(getpid())
 riempisvuola.esci(getpid())
Scrivere il monitor riempisvuota.
*/
//entrano max processi finché non è pieno nessuno esce
//i proc escnoo in ordine inverso rispetto all arrivo

#define MAX;
monitor riempisvuota{
stack <pid_t, c> buffer;
condition ok2entra;
condition ok2esci;
int countEntra, countEsci;
bool staRiempiendo; 
int waiting=0;

	entra(pid){
		if(count >= MAX){
			waiting++;
			staRiempiendo=false;
			ok2entra.wait();
			waiting--;
		} 
		countEntra ++;
		staRiempiendo = true;
		c = new condition;
		buffer.push(pid, c);
	}
	
	esci(pid){
		countEsci++;
		if(!staRiempiendo){
			while(!buffer.empty()){
			p, c = buffer.head();
			if(p==pid){
				buffer.remove(p);
				p2, c2 = buffer.head();
				c2.signal();
			} else {
				c.wait();
				buffer.remove(p);
			}		
			}
		countEntra--;
		countEsci--;
		staRiempiendo = true;
		if(waiting<MAX){
			for(i=0;i<waiting; i++){
				ok2entra.signal();
			}
		} else {
			for(i=0;i<MAX; i++){
				ok2entra.signal();
			}
		}
	}
}
