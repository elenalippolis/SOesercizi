/*Scrivere il monitor alrv (at least rendez-vous) che fornisce una sola procedure entry:
procedure entry void at_least(int n)
Quando un processo chiama la funzione at_least vuol dire che vuole sincronizzarsi con un insieme di almeno n
processi (incluso il chiamante).
Esempi:
Se un processo chiama at_least(1) non si blocca.
Se il processo p chiama at_least(2) si blocca, se poi il processo q chiama at_least(2) oppure at_least(1) si
sbloccano sia p sia q (la richiesta di p è soddisfatta, ne aspettava almeno 2, p e q)
Se il processo p chiama at_least(2) si blocca, se poi il processo q chiama at_least(3) si blocca anch'esso perché
sebbene la richiesta di p possa essere soddisfatta, q non può ancora sbloccarsi: ci sono solo 2 processi in attesa mentre
q ne vuole 3. Un terzo processo che chiami at_least(x) con x=1,2,3 li sblocca tutti.

w[k] numero dei processi in attesa di essere in almeno k 
s[n]=∑(k=1, n) w[k] 
(rappresenta il numero di processi soddisfacibili:
e.g. se ci sono 4 processi in attesa, potrebbero essere soddisfatte le richieste dei processi che ne aspettano almeno 2,
almeno 3 o almeno 4). Preso, se esiste, il massimo indice m tale che s[m]≥m tutti i processi in attesa di essere in n,
per n≤m possono essere sbloccati.
*/
// se n == 1 -> fine o sblocchi i precedenti
// se n (max) ==set.length -> sblocchi proc e tutti gli altri a catena


monitor alrv{
  set <condition> waitingProc;
  int max = 0;

  procedure entry void at_least(int n){
      if(n>max){
        max = n;
      }
      if(waitingProc.length + 1 < max){
       condition c = new condition;
       waitingProc.add(c);
       c.wait();
      } else {
        while(!waitingProc.isEmpty()){
          c = waitingProc.remove();
          c.signal();
        }
      }
  }
}
