soluzione corretta
RIFAI

/*
Esercizio c.1: Il monitor "semaforo con timeout" semtimeout deve fornire tre procedure entry:
void V(void)
boolean P(unsigned int timeout)
void tick(void)
Vale l'invariante dei semafori generali. La funzione tick viene richiamata ad ogni millisecondo. Un processo messo in
attesa a causa di una P attende al massimo il numero di millisecondi indicato nel parametro.
Se un processo viene riattivato per timeout la P ritorna valore vero, altrimenti falso. Le operazioni V devono riattivare i
processi in attesa in ordine FIFO.
Scrivere semtimeout
*/


monitor semtimeout{
queue waitingProc <condition, int>;
int value;
//int value;

	riattivano i proc in ordine FIFO
	void V(){
		if(!waitingProc.empty()){
			c = waitingProc.first().first;
			c.signal();
		}
	}
	
	//proc in attesa a causa di P attende al max timeout ms;
	//se viene riattivato per timeout, P ritorna true, altrimenti false
	boolean P(unsigned int timeout){
	
		if(value==0){
			condition c = new condition;
			waitingProc.enqueue(c, timeout);
			c.wait();
			waitingProc.remove(c, timeout);
			value--;
			return(timeout==0);
		}
		return false;
	}
	
	//chiamata ogni ms
	void tick(){
		foreach proc in waitingProc:
			proc.Second()--;
			if(proc.Second==0){
				proc.first.signal();
			}
			
	}
}
