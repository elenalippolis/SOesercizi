quello sotto è l'es corretto del prof
RIFARE

/*
Esercizio c.1: Scopo di questo esercizio è di scrivere un monitor mbuf che realizzi un buffer limitato dove ogni elemento
venga inserito con una molteplicità. In particolare mbuf deve fornire le seguenti procedure entry:
void add(type data, int n);
che inserisce il dato data con molteplicità n.
type get(void);
che restituisce il primo dato disponibile.
Il monitor deve soddisfare i seguenti vincoli:
• il buffer deve contenere al più MAXELEM elementi (ogni operazione add aggiunge un elemento
indipendentemente dalla molteplicità n)
• i dati vengono consegnati in ordine FIFO
• un dato inserito con molteplicità n deve essere ricevuto da n processi: il monitor deve attendere che n processi
chiamino (o abbiano chiamato) la get e a quel punto restituisce il dato a tutti e toglie l'elemento dal buffer. 
*/

#define MAXXELEM
//l'elem dal buffer
monitor mbuf{
	queue of struct{type val, int n} buffer;
	condition ok2add, ok2get;
	int nget=0;
	

	//inserisce data con molteplicità n
	void add(type data, int n){
	
		if(buffer.length >= MAXELEM){
			ok2add.wait();
		}
		buffer.enqueue(data, n);
		if(buffer.head().n <= nget){
			ok2get.signal();
		}
		
	}
	
	//restituisce il primo dato disponibile
	type get(){
		nget++;
		if(buffer.empty() || buffer.head().n > nget){
			ok2get.wait();
		}
		nget--;
		//copia solo i valori
		val, n = buffer.head();
		buffer.head().n--;
		if(buffer.head().n > 0){
			ok2get.signal()
		} else {
			buffer.dequeue(val, n);
			ok2add.signal()
		}
		return val;
	}
}

scrive una volta val, ma decrementa n;
